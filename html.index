<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=390, initial-scale=1.0" />
  <title>Flip to Earn</title>

  <!-- Farcaster Mini App Metadata -->
  <meta name="fc:miniapp" content='{
    "version":"1",
    "imageUrl":"https://fliptoearn.vercel.app/public/preview.png",
    "button":{
      "title":"Play",
      "action":{
        "type":"launch_frame",
        "name":"Flip to Earn",
        "url":"https://fliptoearn.vercel.app",
        "splashImageUrl":"https://fliptoearn.vercel.app/public/splash.png",
        "splashBackgroundColor":"#111111"
      }
    }
  }' />

  <style>
    body { margin: 0; background: #111; color: #fff; font-family: sans-serif; display: flex; flex-direction: column; align-items: center; min-height: 100vh; max-width: 390px; margin-inline: auto; }
    .tabbar { display: flex; gap: 8px; width: 100%; margin: 12px; }
    .tabbar button { flex: 1; padding: 10px; background: #1a1a1a; border: 1px solid #333; color: #aaa; border-radius: 8px; font-weight: bold; }
    .tabbar button.active { background: #ffd166; color: #000; border-color: #ffd166; }
    .hidden { display: none; }
    .coin { width: 180px; height: 180px; perspective: 1000px; margin: 16px auto; }
    .coin-inner { width: 100%; height: 100%; position: relative; transform-style: preserve-3d; transition: transform 1s ease-in-out; }
    .face { position: absolute; inset: 0; display: grid; place-items: center; border-radius: 50%; background: #222; border: 2px solid rgba(255,255,255,0.12); backface-visibility: hidden; overflow: hidden; }
    .face img { width: 70%; height: 70%; object-fit: contain; }
    .tail { transform: rotateY(180deg); }
    .btn { padding: 12px; background: #ffd166; color: #000; border: none; border-radius: 10px; font-weight: bold; width: 90%; margin: 8px auto; cursor: pointer; }
    .btn:disabled { background: #666; color: #ccc; cursor: not-allowed; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 8px; border-bottom: 1px solid #222; }
    .toast { position: fixed; bottom: 14px; left: 50%; transform: translateX(-50%); background: rgba(255,255,255,.12); backdrop-filter: blur(8px); color: #fff; border-radius: 14px; padding: 10px 14px; max-width: 360px; width: calc(100% - 24px); display: none; }
    .toast.show { display: block; animation: fadeIn .25s ease; }
    @keyframes fadeIn { from { opacity: 0; transform: translate(-50%, 10px); } to { opacity: 1; transform: translate(-50%, 0); } }
  </style>
</head>
<body>

  <div class="tabbar">
    <button id="tabFlipBtn" class="active">Flip</button>
    <button id="tabLbBtn">Leaderboard</button>
  </div>

  <section id="flipTab">
    <div class="coin">
      <div id="coinInner" class="coin-inner">
        <div class="face"><img src="/public/arbitrum.png" alt="Heads"></div>
        <div class="face tail"><img src="/public/base.png" alt="Tails"></div>
      </div>
    </div>
    <button id="flipBtn" class="btn">Flip the Coin üéØ</button>
    <div id="flipResult" style="text-align:center;margin-top:8px;font-weight:700;"></div>
    <button id="claimBtn" class="btn hidden" disabled>Claim on Base</button>
  </section>

  <section id="leaderboardTab" class="hidden" style="width:100%;padding:0 12px;">
    <h3>üèÜ Top 10 Players (Total Flips)</h3>
    <table><thead><tr><th>#</th><th>Address</th><th>Flips</th></tr></thead><tbody id="leaderboardBody"><tr><td colspan="3" style="text-align:center;">Loading‚Ä¶</td></tr></tbody></table>
  </section>

  <div id="toast" class="toast"></div>

  <script type="module">
    import { sdk } from 'https://esm.sh/@farcaster/miniapp-sdk';
    import { createConfig, connect, switchChain, writeContract, readContract, watchContractEvent, getAccount, http } from 'https://esm.sh/@wagmi/core';
    import { arbitrum, base } from 'https://esm.sh/@wagmi/core/chains';
    import { farcasterMiniApp } from 'https://esm.sh/@farcaster/miniapp-wagmi-connector';

    sdk.actions.ready({ disableNativeGestures: true });

    const flipTab = document.getElementById('flipTab');
    const leaderboardTab = document.getElementById('leaderboardTab');
    const toastEl = document.getElementById('toast');
    const flipBtn = document.getElementById('flipBtn');
    const claimBtn = document.getElementById('claimBtn');
    const flipResult = document.getElementById('flipResult');
    const coinInner = document.getElementById('coinInner');

    function showToast(html, ms=3500){ toastEl.innerHTML=html; toastEl.classList.add('show'); setTimeout(()=>toastEl.classList.remove('show'), ms); }

    document.getElementById('tabFlipBtn').onclick = () => { flipTab.classList.remove('hidden'); leaderboardTab.classList.add('hidden'); };
    document.getElementById('tabLbBtn').onclick = () => { leaderboardTab.classList.remove('hidden'); flipTab.classList.add('hidden'); loadLeaderboard(); };

    const arbJson = await fetch('/public/arbitrumGame.json').then(r=>r.json());
    const baseJson = await fetch('/public/baseClaim.json').then(r=>r.json());
    const ARB_ADDR = arbJson.address, ARB_ABI = arbJson.abi;
    const BASE_ADDR = baseJson.address, BASE_ABI = baseJson.abi;

    const config = createConfig({ chains: [arbitrum, base], transports: { [arbitrum.id]: http(), [base.id]: http() } });
    await connect(config, { connector: farcasterMiniApp() }).catch(()=>{});
    const userAddress = getAccount(config)?.address;

    watchContractEvent(config,{ address: ARB_ADDR, abi: ARB_ABI, eventName:'RewardPaid', args: userAddress ? { player: userAddress } : undefined, onLogs: logs => {
      for(const log of logs){ showToast(`üéØ Won on Arbitrum ‚Äî ${log.args.amount}`); flipResult.textContent = 'Heads ‚Äî reward sent'; claimBtn.classList.add('hidden'); }
    }});
    watchContractEvent(config,{ address: ARB_ADDR, abi: ARB_ABI, eventName:'BaseWin', args: userAddress ? { player: userAddress } : undefined, onLogs: logs => {
      for(const _ of logs){ showToast(`ü™ô Tails ‚Äî Claim on Base`); flipResult.textContent = 'Tails ‚Äî claim available'; claimBtn.classList.remove('hidden'); claimBtn.disabled = false; }
    }});

    flipBtn.onclick = async () => {
      claimBtn.classList.add('hidden'); claimBtn.disabled = true;
      coinInner.style.transform = 'rotateY(720deg)';
      try { await switchChain(config,{ chainId: arbitrum.id }); const tx = await writeContract(config,{ address:ARB_ADDR, abi:ARB_ABI, functionName:'flip' }); showToast(`‚è≥ Flip sent <a href="https://arbiscan.io/tx/${tx}">view</a>`); } catch { showToast('‚ùå Flip failed'); }
    };

    claimBtn.onclick = async () => {
      try { await switchChain(config,{ chainId: base.id }); const tx = await writeContract(config,{ address:BASE_ADDR, abi:BASE_ABI, functionName:'claim' }); showToast(`üéâ Claimed on Base <a href="https://basescan.org/tx/${tx}">view</a>`); claimBtn.classList.add('hidden'); flipResult.textContent = 'Claimed. Flip again!'; } catch { showToast('‚ùå Claim failed'); }
    };

    async function loadLeaderboard(){
      const tbody = document.getElementById('leaderboardBody'); tbody.innerHTML = '<tr><td colspan="3" style="text-align:center;">Loading‚Ä¶</td></tr>';
      try { const [players, counts] = await readContract(config,{ address: ARB_ADDR, abi: ARB_ABI, functionName:'getTopPlayers', args:[10n] }); tbody.innerHTML=''; players.forEach((p,i)=>{ tbody.innerHTML += `<tr><td>${i+1}</td><td>${p.slice(0,6)}‚Ä¶${p.slice(-4)}</td><td>${counts[i]}</td></tr>`; }); } catch { tbody.innerHTML='<tr><td colspan="3" style="text-align:center;">Failed</td></tr>'; }
    }
  </script>
</body>
</html>
